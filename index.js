// Generated by CoffeeScript 1.6.3
(function() {
  var ItemPile, deepEqual, deepFreeze;

  deepEqual = require('deep-equal');

  deepFreeze = require('deep-freeze');

  module.exports = ItemPile = (function() {
    function ItemPile(item, count, tags) {
      item = typeof item === 'string' ? ItemPile.itemFromString(item) : item;
      if (item == null) {
        throw "itempile illegal item: " + item + " is undefined " + count + " " + tags + ", must be defined";
      }
      count = count != null ? count : 1;
      if (count <= 0) {
        throw "itempile illegal count: " + count + " for item " + item + " " + tags + ", must be >0";
      }
      tags = tags != null ? tags : {};
      deepFreeze(tags);
      Object.defineProperties(this, {
        item: {
          value: item,
          writable: false,
          enumerable: true
        },
        count: {
          value: count,
          writable: false,
          enumerable: true
        },
        tags: {
          value: tags,
          writable: false,
          enumerable: true
        }
      });
      Object.freeze(this);
    }

    ItemPile.maxPileSize = 64;

    ItemPile.itemFromString = function(s) {
      if (!s) {
        return void 0;
      }
      if (s instanceof ItemPile) {
        return s;
      }
      return s;
    };

    ItemPile.itemToString = function(item) {
      return '' + item;
    };

    ItemPile.prototype.hasTags = function() {
      return Object.keys(this.tags).length !== 0;
    };

    ItemPile.prototype.matchesType = function(itemPile) {
      return (itemPile != null) && this.item === itemPile.item;
    };

    ItemPile.prototype.matchesTypeAndCount = function(itemPile) {
      return (itemPile != null) && this.item === itemPile.item && this.count === itemPile.count;
    };

    ItemPile.prototype.matchesTypeAndTags = function(itemPile) {
      return (itemPile != null) && this.item === itemPile.item && deepEqual(this.tags, itemPile.tags, {
        strict: true
      });
    };

    ItemPile.prototype.matchesAll = function(itemPile) {
      return (itemPile != null) && this.matchesTypeAndCount(itemPile) && deepEqual(this.tags, itemPile.tags, {
        strict: true
      });
    };

    ItemPile.prototype.canPileWith = function(itemPile) {
      if (itemPile == null) {
        return false;
      }
      if (itemPile.item !== this.item) {
        return false;
      }
      if (itemPile.hasTags() || this.hasTags()) {
        return false;
      }
      return true;
    };

    ItemPile.prototype.mergedPile = function(itemPile) {
      var excessCount, ourNew, theirNew, _ref;
      if (!this.canPileWith(itemPile)) {
        return false;
      }
      _ref = this.increased(itemPile.count), ourNew = _ref[0], excessCount = _ref[1];
      if (excessCount === 0) {
        theirNew = void 0;
      } else {
        theirNew = new ItemPile(itemPile.item, excessCount, itemPile.tags);
      }
      return [ourNew, theirNew];
    };

    ItemPile.prototype.increased = function(n) {
      var excessCount, newCount, newPile, _ref;
      _ref = this.tryAdding(n), newCount = _ref[0], excessCount = _ref[1];
      newPile = new ItemPile(this.item, newCount, this.tags);
      return [newPile, excessCount];
    };

    ItemPile.prototype.decreased = function(n) {
      var newPile, remainingCount, removedCount, _ref;
      _ref = this.trySubtracting(n), removedCount = _ref[0], remainingCount = _ref[1];
      if (remainingCount === 0) {
        newPile = void 0;
      } else {
        newPile = new ItemPile(this.item, remainingCount, this.tags);
      }
      return [newPile, removedCount];
    };

    ItemPile.prototype.tryAdding = function(n) {
      var sum;
      sum = this.count + n;
      if (sum > ItemPile.maxPileSize && this.count !== Infinity) {
        return [ItemPile.maxPileSize, sum - ItemPile.maxPileSize];
      } else {
        return [sum, 0];
      }
    };

    ItemPile.prototype.trySubtracting = function(n) {
      var difference;
      difference = this.count - n;
      if (difference < 0) {
        return [this.count, n - this.count];
      } else {
        return [n, this.count - n];
      }
    };

    ItemPile.prototype.splitPile = function(n) {
      var ourNew, theirNew;
      if (n < 0) {
        n = this.count + n;
      } else if (n < 1) {
        n = Math.ceil(this.count * n);
      }
      if (n > this.count) {
        return [this, void 0];
      }
      if (this.count - n === 0) {
        ourNew = void 0;
      } else {
        ourNew = new ItemPile(this.item, this.count - n, this.tags);
      }
      if (n === 0) {
        theirNew = void 0;
      } else {
        theirNew = new ItemPile(this.item, n, this.tags);
      }
      return [ourNew, theirNew];
    };

    ItemPile.prototype.toString = function() {
      if (this.hasTags()) {
        return "" + this.count + ":" + this.item + " " + (JSON.stringify(this.tags));
      } else {
        return "" + this.count + ":" + this.item;
      }
    };

    ItemPile.fromString = function(s) {
      var a, count, countStr, item, itemStr, tags, tagsStr, _;
      a = s.match(/^([^:]+):([^ ]+) ?(.*)/);
      if (!a) {
        return void 0;
      }
      _ = a[0], countStr = a[1], itemStr = a[2], tagsStr = a[3];
      count = parseInt(countStr, 10);
      item = ItemPile.itemFromString(itemStr);
      if (tagsStr && tagsStr.length) {
        tags = JSON.parse(tagsStr);
      } else {
        tags = {};
      }
      return new ItemPile(item, count, tags);
    };

    return ItemPile;

  })();

}).call(this);
